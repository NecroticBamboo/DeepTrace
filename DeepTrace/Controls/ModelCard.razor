@using DeepTrace.Data;
@using DeepTrace.ML;
@using DeepTrace.Services;
@using PrometheusAPI;

@inject PrometheusClient Prometheus
@inject IDialogService DialogService
@inject IModelStorageService ModelService
@inject ITrainedModelStorageService TrainedModelService
@inject ILogger<ModelCard> Logger
@inject IMLProcessorFactory MlProcessorFactory
@inject IPrometheusWatcher Watcher

<style>
    .card {
        max-width: 250pt;
    }
</style>

<MudCard Class="card mb-3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Model?.Name</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudSwitch @bind-Checked="IsEnabled"> @Model?.IsEnabled</MudSwitch>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>    
        <MudText>Current state: @_prediction.PredictedLabel</MudText>
        <MudText>@_updated.ToString("HH:mm:ss")</MudText>
    </MudCardContent>
</MudCard>

@code{
    [Parameter]
    public TrainedModelDefinition? Model { get; set; }

    private ModelDefinition _modelDefinition = new();
    private Prediction _prediction           = new();
    private IMLProcessor? _mlProcessor;
    private DateTime _updated                = DateTime.MinValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || Model?.Id == null)
        {
            return;
        }
        _modelDefinition = (await ModelService.Load(Model.Id)) ?? _modelDefinition;
        _mlProcessor = MlProcessorFactory.Create();

        #pragma warning disable CS4014
        Task.Run(PredictionLoop);
        #pragma warning restore CS4014
    }

    private bool IsEnabled
    {
        get => Model?.IsEnabled ?? false;
        set
        {
            if (Model==null || Model.IsEnabled == value)
            {
                return;
            }
            Model.IsEnabled = value;
            InvokeAsync(SaveIsEnabled);
        }
    }

    private async Task SaveIsEnabled()
    {
        if(Model == null)
        {
            return;
        }

        var trainedModel = new TrainedModelDefinition
            {
                Id        = Model.Id,
                IsEnabled = Model.IsEnabled,
                Name      = Model.Name,
                Value     = Model.Value
            };
        await TrainedModelService.Store(trainedModel);
    }

    private async Task PredictionLoop()
    {
        var startDate = DateTime.UtcNow;
        while (true)
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(5));
                var endDate = DateTime.UtcNow;
                await PredictAnomaly(startDate, endDate);
                startDate = endDate;
            }
            catch(Exception e)
            {
                Logger.LogError(e, e.Message);
            }
        }
    }

    private async Task PredictAnomaly(DateTime startDate, DateTime endDate)
    {
        if (Model == null || !Model.IsEnabled)
        {
            _prediction = new Prediction { PredictedLabel = "Idle" };
            return;
        }

        var data = Watcher.GetData(_modelDefinition!.DataSource.Queries);

        if (data == null)
        {
            _prediction = new Prediction { PredictedLabel = "Gathering..." };
            return;
        }

        _prediction = await _mlProcessor!.Predict(Model, _modelDefinition, data.Data);
        _updated = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowError(string text)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };
        var parameters = new DialogParameters();
        parameters.Add("Text", text);

        var d = DialogService.Show<Controls.Dialog>("Error", parameters, options);
        await d.Result;
    }
}