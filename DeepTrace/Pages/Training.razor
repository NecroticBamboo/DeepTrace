@page "/training"
@using CsvHelper;
@using DeepTrace.Data;
@using DeepTrace.ML;
@using DeepTrace.Services;
@using System.ComponentModel.DataAnnotations;
@using DeepTrace.Controls;
@using Microsoft.ML;
@using PrometheusAPI;
@using System.Text;
@using System.Globalization;
@using System.Collections.Concurrent;

@inject PrometheusClient Prometheus
@inject IDialogService DialogService
@inject IDataSourceStorageService StorageService
@inject IModelStorageService ModelService
@inject ITrainedModelStorageService TrainedModelService
@inject IEstimatorBuilder EstimatorBuilder
@inject NavigationManager NavManager
@inject IJSRuntime Js
@inject IMLProcessorFactory MlProcessorFactory


<PageTitle>Training</PageTitle>

<style>
    .graph {
        max-width: 800px;
        max-height: 600px;
    }
</style>

<h1>Training</h1>

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="12" sm="6" md="6" lg="3">

        <MudCard Class="mb-3">
            <MudCardActions>
                <MudSelect T="ModelDefinition" Label="Model name" AnchorOrigin="Origin.BottomCenter" @bind-Value="_modelForm!.CurrentModel">
                    @foreach (var model in _modelDefinitions)
                    {
                        <MudSelectItem Value="@model">@model.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleAddModel">Add</MudButton>
                @if (_modelDefinitions.Count > 1)
                {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleDeleteModel">Delete</MudButton>
                }
            </MudCardActions>
            <MudCardActions>
                <MudSelect T="DataSourceStorage" Label="Data source name" AnchorOrigin="Origin.BottomCenter" @bind-Value="_modelForm!.DataSource">
                    @foreach (var source in _dataSources)
                    {
                        <MudSelectItem Value="@source">@source.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudCardActions>
        </MudCard>

        <MudCard Class="mb-3">
            <MudTextField Label="Model name" T="String" Variant="Variant.Text" InputType="InputType.Search" @bind-Value="_modelForm!.CurrentModel.Name" />
            <MudTextField Label="AI parameters" T="String" Variant="Variant.Text" InputType="InputType.Search" />
        </MudCard>

        <MudCard Class="mb-3">
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleAddTableContent" Disabled="@IsAddDisabled">Add</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleRefresh" Disabled="@IsAddDisabled">Refresh</MudButton>
                <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="@HandleImport" MaximumFileCount="1" Class="ml-3">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="MudBlazor.Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Import
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleExport" Disabled="@IsAddDisabled">Export</MudButton>
                <MudSpacer/>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-3" OnClick="@HandleTrain">Train</MudButton>
            </MudCardActions>
            

            <MudTable 
                Items="@_modelForm!.CurrentModel.IntervalDefinitionList" 
                Hover="true" 
                FixedHeader="@fixed_header"
                Height="400px"
                CanCancelEdit="@canCancelEdit" 
                RowEditPreview="@BackupInterval"
                RowEditCancel="ResetItemToOriginalValues"
                RowEditCommit="ItemHasBeenCommitted"
                Breakpoint="Breakpoint.Sm"
                T="IntervalDefinition"
            >
                <HeaderContent>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="From">@context.From</MudTd>
                    <MudTd DataLabel="To">@context.To</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="ml-3" OnClick="@(()=>HandleDeleteTableContent(context))"></MudIconButton>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="From">@context.From</MudTd>
                    <MudTd DataLabel="To">@context.To</MudTd>
                    <MudTd DataLabel="Name">
                        <MudTextField @bind-Value="@context.Name" Required />
                    </MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="ml-3" OnClick="@(()=>HandleDeleteTableContent(context))"></MudIconButton>
                </RowEditingTemplate>
            </MudTable>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="9">
        <MudCard>
            <MudCardContent>
                <div hidden="@IsChartShown"><MudProgressCircular Color="MudBlazor.Color.Default" /></div>
                <div hidden="@IsChartHidden">
                    @*Bind minDate and maxDate*@
                    <TimeSeriesChart Data="@DisplayData" @bind-MinDate=MinDate @bind-MaxDate=MaxDate />
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    private bool IsChartHidden => DisplayData == null;
    private bool IsChartShown => !IsChartHidden;
    private bool fixed_header = true;
    private bool canCancelEdit = true;
    private string _nameBackUp = "";

    private class ModelForm
    {
        public ModelForm(Training self)
        {
            _self = self;
        }

        private ModelDefinition _currentModel = new();
        private readonly Training _self;

        [Required]
        public DataSourceStorage DataSource
        {
            get
            {
                return _currentModel.DataSource;
            }
            set
            {
                if(_currentModel.DataSource == value)
                {
                    return;
                }
                _currentModel.DataSource = value;
                _self.InvokeAsync(_self.HandleRefresh);
                _self.InvokeAsync(_self.HandleShowQuery);
            }
        }

        [Required]
        public ModelDefinition CurrentModel 
        {
            get
            {
                return _currentModel;
            }
            set
            {
                if (_currentModel == value)
                {
                    return;
                }
                _currentModel = value;
                _self.InvokeAsync(_self.HandleShowQuery);
                _self.StateHasChanged();

            }
        }

        public DateRange Dates { get; set; } = new DateRange(DateTime.UtcNow.Date - TimeSpan.FromDays(14), DateTime.UtcNow.Date);

        public TimeSpan? TimeStart { get; set; }
        public TimeSpan? TimeEnd { get; set; }

        public TimeSpan Step { get; set; } = TimeSpan.FromSeconds(20);
        public double StepSec
        {
            get => Step.TotalSeconds;
            set => Step = TimeSpan.FromSeconds(value);
        }
    }

    private ModelForm?              _modelForm;
    private List<DataSourceStorage> _dataSources = new();
    private List<ModelDefinition>   _modelDefinitions = new() {new()};
    private DateTime?               _minDate;
    private DateTime?               _maxDate;

    private TimeSeriesData? DisplayData { get; set; }
    private bool IsAddDisabled => DisplayData == null;

    private DateTime? MinDate
    {
        get
        {
            return _minDate ?? DisplayData?.Series.FirstOrDefault()?.Data.MinBy(x=>x.TimeStamp)?.TimeStamp;        
        }
        set
        {
            if (_minDate == value) return;
            _minDate = value;
            InvokeAsync(HandleShowQuery);
        }
    }

    private DateTime? MaxDate
    {
        get
        {
            return _maxDate ?? DisplayData?.Series.FirstOrDefault()?.Data.MaxBy(x => x.TimeStamp)?.TimeStamp;
        }
        set
        {
            if (_maxDate == value) return;
            _maxDate = value;
            InvokeAsync(HandleShowQuery);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _modelForm = new(this);

        base.OnInitialized();

        var sources               = await StorageService.Load();
        var models                = await ModelService.Load();
        var trainedModels         = await TrainedModelService.Load();
        IList<IBrowserFile> files = new List<IBrowserFile>();

        if (sources.Count > 0)
            _dataSources = sources;
        if (models.Count > 0)
            _modelDefinitions = models;

        _modelForm.CurrentModel = _modelDefinitions[0];
        var source              = _dataSources.FirstOrDefault(x => x.Name == _modelDefinitions[0].DataSource.Name);
        _modelForm.DataSource   = source ?? _dataSources[0];

    }

    private async Task HandleShowQuery()
    {
        if (_modelForm!.DataSource.Queries.Count < 1 || string.IsNullOrWhiteSpace(_modelForm.DataSource.Queries[0].Query) || _modelForm.Dates.End == null || _modelForm.Dates.Start == null)
            return;

        var startDate = MinDate ?? (DateTime.UtcNow - TimeSpan.FromDays(30));
        var endDate = MaxDate ?? DateTime.UtcNow;
        var reported = new ConcurrentDictionary<string, bool>();
        await UpdateDisplayData(startDate, endDate, reported);

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateDisplayData(
        DateTime startDate, 
        DateTime endDate, 
        ConcurrentDictionary<string, bool> reported
    )
    {

        // use automatic step value to always request 500 elements
        var seconds = (endDate - startDate).TotalSeconds / 500.0;
        if (seconds < 1.0)
            seconds = 1.0;
        var step = TimeSpan.FromSeconds(seconds);

        var tasks = _modelForm!.DataSource.Queries
            .Select(x => Prometheus.RangeQuery(x.Query, startDate, endDate, step, TimeSpan.FromSeconds(2)))
            .ToArray();

        try
        {
            await Task.WhenAll(tasks);
        }
        catch (Exception e)
        {
            await ShowError(e.Message);
            return;
        }

        var data = new List<TimeSeriesDataSet>();

        foreach (var (res, def) in tasks.Select((x, i) => (x.Result, _modelForm.DataSource.Queries[i])))
        {
            if (res.Status != StatusType.Success)
            {
                var msg = res.Error ?? "Error";
                if ( reported.TryAdd(msg, true))
                    await ShowError(msg);
                return;
            }

            if (res.ResultType != ResultTypeType.Matrix)
            {
                var msg = $"Got {res.ResultType}, but Matrix expected for {def.Query}";
                if (reported.TryAdd(msg, true))
                    await ShowError(msg);
                return;
            }

            var m = res.AsMatrix().Result;
            if (m == null || m.Length != 1)
            {
                var msg = $"No data returned for {def.Query}";
                if (reported.TryAdd(msg, true))
                    await ShowError(msg);
                return;
            }

            data.Add(
                new()
                    {
                        Name = def.Query,
                        Color = def.Color,
                        Data = m[0].Values!.ToList()
                    }
            );
        }

        DisplayData = new() { Series = data };
    }

    private void HandleAddModel()
    {
        if (_modelForm == null)
            return;

        _modelDefinitions.Add(new());
        _modelForm.CurrentModel = _modelDefinitions[^1];
        StateHasChanged();
    }

    private async Task HandleDeleteModel()
    {
        if (_modelDefinitions.Count < 2)
        {
            return;
        }

        var pos = _modelDefinitions.IndexOf(_modelForm!.CurrentModel);
        if (pos < 0)
        {
            await ShowError("Not found");
            return;
        }

        var toDelete = _modelDefinitions[pos];
        _modelDefinitions.RemoveAt(pos);
        _modelForm.CurrentModel = _modelDefinitions[pos < _modelDefinitions.Count ? pos : _modelDefinitions.Count - 1];

        if (toDelete.Id != null)
        {
            await ModelService.Delete(toDelete);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleAddTableContent()
    {
        var interval = new IntervalDefinition
        {
            From = MinDate!.Value,
            To = MaxDate!.Value,
            Name = "Unknown",
            Data = DisplayData!.Series
        };
        _modelForm!.CurrentModel.IntervalDefinitionList.Add(interval);
        await ModelService.Store(_modelForm!.CurrentModel);
        await InvokeAsync(StateHasChanged);
    }

    private void BackupInterval(object element)
    {
        if(element is IntervalDefinition interval)
        {
            _nameBackUp = interval.Name;
            var reported = new ConcurrentDictionary<string, bool>();
            InvokeAsync( async () =>
            {
                await UpdateDisplayData(interval.From, interval.To, reported);
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        if (element is IntervalDefinition interval)
        {
            interval.Name = _nameBackUp;
        }
    }

    private void ItemHasBeenCommitted(object element)
    {
        Task.Run(() => ModelService.Store(_modelForm!.CurrentModel));
    }

    private async Task HandleRefresh()
    {
        if (DisplayData == null)
            return;

        var previousIntervals = _modelForm!.CurrentModel.IntervalDefinitionList;
        var reported = new ConcurrentDictionary<string, bool>();
        foreach(var currentInterval in previousIntervals)
        {
            await UpdateDisplayData(currentInterval.From,currentInterval.To, reported);
            currentInterval.Data = DisplayData!.Series;
        }       
        await ModelService.Store(_modelForm!.CurrentModel);
        // await InvokeAsync(StateHasChanged);
    }

    private class ImportedCsv
    {
        public DateTime Start { get; set; }
        public DateTime End   { get; set; }
        public string Label   { get; set; } = "";
    }

    private async Task HandleImport(IBrowserFile file)
    {
        try
        {
            await HandleImportInternal(file);
        }
        catch (Exception e)
        {
            await ShowError($"Can't import: {e.Message}");
        }
    }

    private async Task HandleImportInternal(IBrowserFile file)
    {
        if ( _modelForm == null )
            return;

        using var mem = new MemoryStream();
        // https://stackoverflow.com/questions/67066860/blazorinputfile-synchronous-reads-are-not-supported
        await file.OpenReadStream(file.Size).CopyToAsync(mem);
        mem.Position = 0;

        //        var text = Encoding.UTF8.GetString(mem.ToArray());

        using (var reader = new StreamReader(mem))
        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
        {
            var records = csv.GetRecords<ImportedCsv>();

            var yes = await YesNo("If you want to replace all intervals click Yes. Click No to append.");
            if (yes == null)
                return;

            if (yes == true)
                _modelForm.CurrentModel.IntervalDefinitionList.Clear();

            var normalWorkStart = DateTime.MinValue;
            foreach( var rec in records)
            {
                if(normalWorkStart != DateTime.MinValue)
                {
                    var normalWorkEnd = rec.Start - TimeSpan.FromSeconds(1);
                    if(normalWorkStart<normalWorkEnd)
                        _modelForm.CurrentModel.IntervalDefinitionList.Add(new(normalWorkStart, normalWorkEnd, "Normal work"));
                }
                normalWorkStart = rec.End+TimeSpan.FromSeconds(1);
                _modelForm.CurrentModel.IntervalDefinitionList.Add(new(rec.Start, rec.End, rec.Label));
            }
        }

        await HandleRefresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleExport()
    {
        if (_modelForm == null)
            return;

        await Js.InvokeVoidAsync("open", $"{NavManager.BaseUri}api/download/mldata/{Uri.EscapeDataString(_modelForm.CurrentModel.Name)}", "_blank");

    }

    private async Task HandleDeleteTableContent(IntervalDefinition interval)
    {
        _modelForm!.CurrentModel.IntervalDefinitionList.Remove(interval);
        await ModelService.Store(_modelForm!.CurrentModel);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowError(string text)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };
        var parameters = new DialogParameters();
        parameters.Add("Text", text);

        var d = DialogService.Show<Controls.Dialog>("Error", parameters, options);
        await d.Result;
    }

    private async Task<bool?> YesNo(string text)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };
        var parameters = new DialogParameters();
        parameters.Add(nameof(Controls.Dialog.Text), text);
        parameters.Add(nameof(Controls.Dialog.IsYesNoCancel), true);

        var d = DialogService.Show<Controls.Dialog>("Query", parameters, options);
        var res = await d.Result;
        return res?.Data as bool?;
    }

    private async Task HandleTrain()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };
        var parameters = new DialogParameters();
        
        var mlProcessor = MlProcessorFactory.Create();

        parameters.Add(nameof(Controls.TrainingDialog.Text), _modelForm!.CurrentModel.Name);
        parameters.Add(nameof(Controls.TrainingDialog.Processor), mlProcessor);
        parameters.Add(nameof(Controls.TrainingDialog.Model), _modelForm.CurrentModel);

        var d = DialogService.Show<Controls.TrainingDialog>("Training", parameters, options);
        var res = await d.Result;

        var bytes = mlProcessor.Export();
        
        //save to Mongo
        var trainedModel = new TrainedModelDefinition
        {
            Id = _modelForm!.CurrentModel.Id,
            IsEnabled = false,
            Name = _modelForm!.CurrentModel.Name,
            Value = bytes
        };
        await TrainedModelService.Store(trainedModel);
    }

    
}
